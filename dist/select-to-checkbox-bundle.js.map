{"version":3,"file":"select-to-checkbox-bundle.js","sources":["../src/SelectToCheckbox.ts","../src/select-to-checkbox.ts"],"sourcesContent":["/*! \n *  Convert select element to checkboxes or radio buttons jQuery plugin.\n *  Copyright (C) 2021  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\n\nconst NULL_OPTION = new class implements Option {\n    public select(): void {}\n    public deselect(): void {}\n    public enable(): void {}\n    public disable(): void {}\n    public isSelected(): boolean {return false;}\n    public isDisabled(): boolean {return false;}\n    public getListItem(): HTMLElement {return document.createElement('div');}\n    public getLabel(): string {return 'NULL_OPTION'}\n    public getValue(): string {return 'NULL_OPTION'}\n}\n\ninterface Option {\n    select(): void;\n    deselect(): void;\n    enable(): void;\n    disable(): void;\n    isSelected(): boolean;\n    isDisabled(): boolean;\n    getListItem(): HTMLElement\n    getLabel(): string;\n    getValue(): string;\n}\n\nexport default class SelectToCheckbox {\n\n    private static createOptions(stc: SelectToCheckbox, name: string, type: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            SelectToCheckbox.checkValue(o.value, o.label);\n            return new SelectToCheckbox.SingleOption(stc, i, name, o.label, o.value, type, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            SelectToCheckbox.checkValue(value, label);\n            return new SelectToCheckbox.SingleOption(stc, j+i, name, label, value, type, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected inputElement: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected stc: SelectToCheckbox;\n    \n        constructor(stc: SelectToCheckbox, row: number, name:string, label: string, value: string, type: string, checked: boolean, disabled: boolean) {\n            this.stc = stc;\n            this.div = document.createElement('div');\n            this.inputElement = document.createElement('input');\n            this.inputElement.type = type;\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-i';\n            this.inputElement.id = nchbx;\n            this.inputElement.name = name;\n            this.inputElement.value = value;\n            this.inputElement.checked = checked;\n            this.inputElement.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n\n            this.div.className = 'custom-control';\n            this.inputElement.className = 'custom-control-input custom-' + type;\n            this.labelFor.className = 'custom-control-label';\n\n            this.div.append(this.inputElement, this.labelFor);\n        }\n    \n        public select(): void {\n            this.inputElement.checked = true;\n        }\n    \n        public deselect(): void {\n            this.inputElement.checked = false;\n        }\n    \n        public enable(): void {\n            this.inputElement.disabled = false;\n        }\n    \n        public disable(): void {\n            this.inputElement.disabled = true;\n        }\n    \n        public isSelected(): boolean {\n            return this.inputElement.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.inputElement.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n\n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.inputElement.value;\n        }\n    }\n\n    private div: HTMLElement;\n    private options: Array<Option>;\n    private previouslyEnabledOptions: Array<Option>;\n    private allowEnablingAndDisabling: boolean;\n    private disabled: boolean;\n    private name: string;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {\n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        this.name = select.name;\n        if (!this.name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        let type: string = select.multiple ? \"checkbox\" : \"radio\";\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.div = document.createElement('div');\n        this.div.className = `${select.className} stc`;\n        this.div.id = select.id;\n\n        // items\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = SelectToCheckbox.createOptions(this, this.name, type, array, args.items);\n        this.options.forEach((o: Option) => this.div.append(o.getListItem()));\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        if (this.isDisabled()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.previouslyEnabledOptions = this.options.filter((o) => !o.isDisabled());\n        this.options.forEach((o) => o.disable());\n        this.disabled = true;\n        this.div.classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        if (!this.isDisabled()) return;\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.previouslyEnabledOptions.forEach((o) => o.enable());\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        if (this.isDisabled()) return;\n        this.options.forEach((o) => o.select())\n    }\n\n    public deselectAll(): void {\n        if (this.isDisabled()) return;\n        this.options.forEach((o) => o.deselect())\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.name] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        return c;\n    }\n}","/*! \n *  Convert select element to checkboxes or radio buttons jQuery plugin.\n *  Copyright (C) 2021  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport SelectToCheckbox from './SelectToCheckbox';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).selectToCheckbox = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).selectToCheckbox.args, args);\n\n    // factory defaults\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n\n    let selectToCheckbox = new SelectToCheckbox(target, args);\n  \n    const stc = $(selectToCheckbox.getRootElement());\n    target.replaceWith(stc);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return selectToCheckbox.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            selectToCheckbox.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            selectToCheckbox.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return selectToCheckbox.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            selectToCheckbox.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            selectToCheckbox.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return selectToCheckbox.isOptionDisabled(value);\n        },\n        enable: function():void {\n            selectToCheckbox.enable();\n        },\n        disable: function():void {\n            selectToCheckbox.disable();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return selectToCheckbox.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n    return methods;\n};\n\n// define the plugin's global default options.\n($.fn as any).selectToCheckbox.args = {};"],"names":[],"mappings":"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"}